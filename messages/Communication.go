// automatically generated by the FlatBuffers compiler, do not modify

package messages

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Communication struct {
	_tab flatbuffers.Table
}

func GetRootAsCommunication(buf []byte, offset flatbuffers.UOffsetT) *Communication {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Communication{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Communication) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Communication) Message() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Communication) Number() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Communication) MutateNumber(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func CommunicationStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func CommunicationAddMessage(builder *flatbuffers.Builder, message flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(message), 0)
}
func CommunicationAddNumber(builder *flatbuffers.Builder, number uint64) {
	builder.PrependUint64Slot(1, number, 0)
}
func CommunicationEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
